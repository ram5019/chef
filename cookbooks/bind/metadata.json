{"name":"bind","version":"2.2.0","description":"Installs/Configures ISC BIND","long_description":"# BIND [![Build Status](https://secure.travis-ci.org/joyofhex/cookbook-bind.png?branch=master)](http://travis-ci.org/joyofhex/cookbook-bind)\n\n## Description\n\nA chef cookbook to manage BIND servers and zones.\n\n## Contents\n\n<!-- vim-markdown-toc GFM -->\n\n* [Requirements](#requirements)\n* [Attributes](#attributes)\n* [Usage](#usage)\n  * [Internal recursive nameserver](#internal-recursive-nameserver)\n  * [Authoritative primary nameserver](#authoritative-primary-nameserver)\n  * [Authoritative secondary nameserver](#authoritative-secondary-nameserver)\n  * [Using views for internal recursion and external authoritative name service](#using-views-for-internal-recursion-and-external-authoritative-name-service)\n  * [Nameserver in chroot mode](#nameserver-in-chroot-mode)\n* [Available Custom Resources](#available-custom-resources)\n  * [`bind_service`](#bind_service)\n    * [Example](#example)\n    * [Properties](#properties)\n  * [`bind_config`](#bind_config)\n    * [Examples](#examples)\n    * [Properties](#properties-1)\n  * [`bind_view`](#bind_view)\n    * [Examples](#examples-1)\n    * [Properties](#properties-2)\n  * [`bind_primary_zone`](#bind_primary_zone)\n    * [Examples](#examples-2)\n    * [Properties](#properties-3)\n  * [`bind_primary_zone_template`](#bind_primary_zone_template)\n    * [Examples](#examples-3)\n    * [Properties](#properties-4)\n    * [A note on serial numbers](#a-note-on-serial-numbers)\n  * [`bind_secondary_zone`](#bind_secondary_zone)\n    * [Examples](#examples-4)\n    * [Properties](#properties-5)\n  * [`bind_forwarder`](#bind_forwarder)\n    * [Examples](#examples-5)\n    * [Properties](#properties-6)\n  * [`bind_acl`](#bind_acl)\n    * [Examples](#examples-6)\n    * [Properties](#properties-7)\n  * [`bind_key`](#bind_key)\n    * [Properties](#properties-8)\n  * [`bind_server`](#bind_server)\n    * [Examples](#examples-7)\n    * [Properties](#properties-9)\n  * [`bind_logging_channel`](#bind_logging_channel)\n    * [Examples](#examples-8)\n    * [Properties](#properties-10)\n  * [`bind_logging_category`](#bind_logging_category)\n    * [Examples](#examples-9)\n    * [Properties](#properties-11)\n* [License and Author](#license-and-author)\n\n<!-- vim-markdown-toc -->\n\n## Requirements\n\nThis release migrates to using custom resources. Thus we require a more recent\nversion of chef (12.16 or above). To continue using this cookbook on older\nversions please stick with the 1.x versions.\n\nThis cookbook now follows the library pattern. To use the cookbook effectively\nyou'll need a wrapper cookbook that has the resources listed.\n\nA default recipe is provided. It only provides a basic recursive name server.\n\nSupported Operating Systems:\n\n- CentOS/RHEL 6.9\n- CentOS/RHEL 7.3\n- Debian 8.9\n- Debian 9.2\n- Ubuntu 14.04\n- Ubuntu 16.04\n\n## Attributes\n\nMost attributes have been removed in favour of custom resources.\nSee the MIGRATION.md document.\n\n## Usage\n\nUsing custom resources leads to a quite flexible configuration, but requires\na little bit more work in a wrapper cookbook to use. The following examples \nare presented here:\n\n- Internal recursive nameserver\n- Authoritative primary nameserver\n- Authoritative secondary nameserver\n- Using views for internal recursion and external authoritative name service\n\n### Internal recursive nameserver\n\n```ruby\nbind_service 'default' do\n  action [:create, :start]\nend\n\nbind_config 'default' do\n  ipv6_listen true\n  options [\n    'check-names slave ignore',\n    'multi-master yes',\n    'provide-ixfr yes',\n    'recursive-clients 10000',\n    'request-ixfr yes',\n    'allow-notify { acl-dns-masters; acl-dns-slaves; }',\n    'allow-query { example-lan; localhost; }',\n    'allow-query-cache { example-lan; localhost; }',\n    'allow-recursion { example-lan; localhost; }',\n    'allow-transfer { acl-dns-masters; acl-dns-slaves; }',\n    'allow-update-forwarding { any; }',\n  ]\nend\n\nbind_acl 'acl-dns-masters' do\n  entries [\n    '! 10.1.1.1',\n    '10/8'\n  ]\nend\n\nbind_acl 'acl-dns-slaves' do\n  entries [\n    'acl-dns-masters'\n  ]\nend\n\nbind_acl 'example-lan' do\n  entries [\n    '10.2/16',\n    '10.3.2/24',\n    '10.4.3.2'\n  ]\nend\n```\n\n### Authoritative primary nameserver\n\nThere are two ways to create primary zone files with this cookbook. The first\nis by providing a complete zone file that is placed in the correct directory\n(and is added to the nameserver configuration by using the\n`bind_primary_zone` resource). The second way is by using the\n`bind_primary_zone_template` resource. To use this you need to provide\nan array of hashes containing the records you want to be added to the zone file.\n\nThe following example has both options shown. In a wrapper cookbook add the code below with appropriate modifications.\n\nYou'll need to configure the ACL entries (and names) for the example-lan and\nacl-dns-masters ACLs for your local configuration.\n\nYou will also need to arrange for the zone files to be placed in the configured\nlocation (which is OS dependent by default).\n\nResource style:\n\n```ruby\nbind_service 'default' do\n  action [:create, :start]\nend\n\nbind_config 'default' do\n  ipv6_listen true\n  options [\n    'recursion no',\n    'allow-query { any; }',\n    'allow-transfer { external-private-interfaces; external-dns; }',\n    'allow-notify { external-private-interfaces; external-dns; localhost; }',\n    'listen-on-v6 { any; }'\n  ]\nend\n\nbind_acl 'external-private-interfaces' do\n  entries [\n  ]\nend\n\nbind_acl 'external-dns' do\n  entries [\n  ]\nend\n\ncookbook_file '/var/named/primary/db.example.com' do\n  owner 'named'\n  group 'named'\n  mode '0440'\n  action :create\nend\n\nbind_primary_zone 'example.com'\n\nbind_primary_zone_template 'example.org' do\n  soa serial: 100\n  default_ttl 200\n  records [\n    { type: 'NS', rdata: 'ns1.example.org.' },\n    { type: 'NS', rdata: 'ns2.example.org.' },\n    { type: 'MX', rdata: '10 mx1.example.org.' },\n    { type: 'MX', rdata: '20 mx1.example.org.' },\n    { owner: 'www', type: 'A', ttl: 20, rdata: '10.5.0.1' },\n    { owner: 'ns1', type: 'A', ttl: 20, rdata: '10.5.1.1' },\n    { owner: 'ns2', type: 'A', ttl: 20, rdata: '10.5.2.1' },\n    { owner: 'mx1', type: 'A', ttl: 20, rdata: '10.5.1.100' },\n    { owner: 'mx2', type: 'A', ttl: 20, rdata: '10.5.2.100' },\n  ]\n\n```\n\n### Authoritative secondary nameserver\n\nIn a wrapper cookbook add the code below with appropriate modifications.\n\nYou'll need to configure the ACL entries (and names) for the example-lan and\nacl-dns-masters ACLs for your local configuration.\n\n```ruby\nbind_service 'default' do\n  action [:create, :start]\nend\n\nbind_config 'default' do\n  ipv6_listen true\n  options [\n    'recursion no',\n    'allow-query { any; }',\n    'allow-transfer { external-private-interfaces; external-dns; }',\n    'allow-notify { external-private-interfaces; external-dns; localhost; }',\n    'listen-on-v6 { any; }'\n  ]\nend\n\nbind_acl 'acl-dns-masters' do\n  entries [\n    '! 10.1.1.1',\n    '10/8'\n  ]\nend\n\nbind_acl 'acl-dns-slaves' do\n  entries [\n    'acl-dns-masters'\n  ]\nend\n\nbind_acl 'example-lan' do\n  entries [\n    '10.2/16',\n    '10.3.2/24',\n    '10.4.3.2'\n  ]\nend\n\nbind_secondary_zone 'example.com' do\n  primaries %w(192.0.2.10 192.0.2.11 192.0.2.12)\nend\n\nbind_secondary_zone 'example.org' do\n  primaries %w(192.0.2.10 192.0.2.11 192.0.2.12)\nend\n```\n\n### Using views for internal recursion and external authoritative name service\n\nUsing the `bind_view` resource allows you to configure one or more views in the\nconfiguration. When using `bind_view` you will need to tell the zone resources\nwhich view they should be configured in. If this is omitted the zone will be\nconfigured in the `bind_config` property `default_view` (which defaults to\n`default`).\n\n\n```ruby\nbind_service 'default'\n\nbind_config 'default' do\n  default_view 'external'\nend\n\nbind_view 'internal' do\n  match_clients ['10.0.0.0/8']\n  options [\n    'recursion yes'\n  ]\nend\n\nbind_primary_zone 'internal-example.com' do\n  view 'internal'\n  zone_name 'example.com'\nend\n\nbind_primary_zone 'secret.example.com' do\n  view 'internal'\nend\n\nbind_view 'external' do\n  options [\n    'recursion no'\n  ]\nend\n\nbind_primary_zone 'example.com'\n```\n\n### Nameserver in chroot mode\n\nThe `bind_service` and `bind_config` resources can accept a boolean `true` or `false` for `chroot`, declaring whether or not to install the BIND server in a chroot manner.\nIf one provider declares this value, the other must match or the converge will fail. Currently all supported platforms except Ubuntu 16.04 LTS are supported with chrooted configuration.\nBy default, this is set to `false`\n\n```ruby\nbind_service 'default' do\n  chroot true\n  action :create\nend\n\nbind_config 'default' do\n  chroot true\n  options [\n    'recursion no',\n    'allow-transfer { internal-dns; }'\n  ]\nend\n```\n\n## Available Custom Resources\n\n### `bind_service`\n\nThe `bind_service` resource installs the pre-requisites for the service to run.\n\nThe `:create` action installs packages and creates appropriate configuration\ndirectories. It does not attempt to create a working configuration.\n\nThe `:start` action ensures that the name server will be started at the end of\nthe chef run and will be started automatically on boot.\n\nThe `:restart` wil immediately restart the name server.\n\n#### Example\n\n```ruby\nbind_service 'default' do\n  action [:create, :start]\nend\n```\n\n#### Properties\n\nThe following properties are supported:\n\n* `sysconfdir` - The system configuration directory where the named config will be located. The default is platform specific. Usually `/etc/named` or `/etc/bind`\n* `vardir` - The location for zone files and other data. The default is platform specific, usually `/var/named` or `/var/cache/bind`.\n* `chroot` - Boolean decleration to setup a chrooted nameserver installation. Defaults to `false`\n* `chroot_dir` - Define the chrooted base directory. Affects `sysconfdir` and `vardir` and is platform specific.\n* `package_name` - The package, or array of packages, needed to install the nameserver. Default is platform specific, usually includes bind and associated utility packages.\n* `run_user` - The user that the name server will run as. Defaults to `named`.\n* `run_group` - The groups that the name server will run as. Defaults to `named`.\n* `service_name` - The name of the service installed by the system packages. Defaults to a platform specific value.\n\n### `bind_config`\n\nThe `bind_config` resource creates the configuration files for the name server.\n\nThe only available action is `:create` which will create the default\nconfiguration files (including RFC1912 zones), configure an rndc key, and\nset any query logging parameters required.\n\nThe `query_log` properties are deprecated and will be removed in a future version.\nMigrate to using the `bind_logging_channel` and `bind_logging_category` resources.\n\n#### Examples\n\n```ruby\nbind_config 'default'\n\nbind_config 'default' do\n  ipv6_listen false\n\n  options [\n    'recursion no',\n    'allow-transfer { external-dns; }'\n  ]\nend\n\nbind_config 'default' do\n  statistics_channel address: 127.0.0.1, port: 8090\n\n  query_log '/var/log/named/query.log'\n  query_log_versions 5\n  query_log_max_size '10m'\n  query_log_options [\n    'print-time yes'\n  ]\nend\n```\n\n#### Properties\n\n* `conf_file` - The desired full path to the main configuration file. Platform specific default.\n* `options_file` - The desired full path to the configuration file containing options. Platform specific default.\n* `chroot` - Configuring a chrooted nameserver. Defaults to `false`\n* `chroot_dir` - Define the chrooted base directory. Platform specific default.\n* `ipv6_listen` - Enables listening on IPv6 instances. Can be true or false. Defaults to true.\n* `options` - Array of option strings. Each option should be a valid BIND option minus the trailing semicolon. Defaults to an empty array.\n* `query_log` - DEPRECATED. If provided will turn on general query logging. Should be the path to the desired log file. Default is empty and thus disabled.\n* `query_log_max_size` - DEPRECATED. Maximum size of query log before rotation. Defaults to '1m'.\n* `query_log_versions` - DEPRECATED. Number of rotated query logs to keep on the system. Defaults to 2.\n* `query_log_options` - DEPRECATED. Array of additional query log options. Defaults to empty array.\n* `statistics_channel` - Presence turns on the statistics channel. Should be a hash containing :address and :port to configure the location where the statistics channel will listen on. This will likely move to a separate resource in the future.\n* `default_view` - The name of the default view to configure zones within when views are used. Defaults to 'default'.\n\n### `bind_view`\n\nThe `bind_view` resource configures a BIND view. This allows you to serve different content to different clients.\n\n#### Examples\n\n```ruby\nbind_view 'internal' do\n  match_clients ['10.0.0.0/8']\n  options ['recursion yes']\nend\n\nbind_view 'external' do\n  options ['recursion no']\nend\n```\n\n#### Properties\n\n* `match_clients` - Serve the content of this view to any client matching an IP address in this list. Defaults to any.\n* `match_destinations` - Server the content of this view to any request arriving on this IP address. Defaults to any.\n* `match_recursive_only` - Match on any recursive requests. Defaults to false.\n* `options` - Array of option strings. Each option should be a valid BIND option minus the trailing semicolon. Defaults to an empty array.\n\n### `bind_primary_zone`\n\nThe `bind_primary_zone` resource will copy a zone file from your current\ncookbook into the correct directory and add the zone as a master zone to your\nBIND configuration. The file should be named for the zone you wish to configure.\nFor example to configure `example.com` the file should be in\n`files/default/example.com`\n\nThis resource also supports setting the action to `:create_if_missing`. In this\nevent the cookbook will only copy a zone file in place if it does not already\nexist. Once copied the cookbook will not touch the file again allowing it to be\nused for dynamic updates. However, please be aware that in the event of the\nserver being rebuilt or the file being removed that the data has not been\npersisted anywhere.\n\n#### Examples\n\n```ruby\nbind_primary_zone 'example.com'\n\nbind_primary_zone 'example.org' do\n  options [\n    'allow-transfer { none; }'\n  ]\nend\n```\n\n#### Properties\n\n* `options` - Array of option strings. Each option should be a valid BIND option minus the trailing semicolon. Defaults to an empty array.\n* `view` - Name of the view to configure the zone in. Defaults to the value from the `bind_config` property.\n* `file_name` - Name of the file to store the zone in. Defaults to the name property. Used when you wish to have the same zone with different content in different views.\n* `zone_name` - The zone name of the zone. Used only if the name property does not match the zone name.\n\n### `bind_primary_zone_template`\n\nThe `bind_primary_zone_template` resource will create a zone file from a\ntemplate and list of desired resources.\n\n#### Examples\n\n```ruby\nbind_primary_zone_template 'example.com' do\n  soa serial: 100, minimum: 3600\n  records [\n    { type: 'NS', rdata: 'ns1.example.com.' },\n    { owner: 'ns1', type: 'A', rdata: '10.0.1.1' }\n  ]\nend\n```\n\n#### Properties\n\n* `soa` - Hash of SOA entries. Available keys are:\n  - `:serial` - The serial number of the zone. Defaults to '1'. If this zone \n  has secondary servers configured then you will need to either manually manage this\n  and update when the record set changes, or use the `manage_serial` property.\n  - `:mname` - Domain name of the primary name server serving this zone. Defaults to 'localhost.'\n  - `:rname` - The email address of the \"Responsible Person\" for this zone with the @-sign replaced by a `.`. Defaults to `hostmaster.localhost.`\n  - `:refresh` - The period that a secondary name server will wait between checking if the zone file has been updated on the master. Defaults to '1w'.\n  - `:retry` - The period that a secondary name server will attempt to retry checking a zone file if the initial attempt fails. Defaults to '15m'.\n  - `:expire` - The length of time that a zone will be considered invalid if the primary name server is unavailable. Defaults to '52w'.\n  - `:minimum` - The length of time that a name server will cache a negative (NXDOMAIN) result. Defaults to 30 seconds.\n* `default_ttl` - The default time to live for any records which do not have an explicitly configured TTL.\n* `records` - An array of hashes describing each desired record. Possible keys are:\n  - `:owner` - The name to be looked up.\n  - `:type` - The record type; examples include: 'NS', 'MX', 'A', 'AAAA'.\n  - `:ttl` - A non-default TTL. If not present will use the default TTL of the zone.\n  - `:rdata` - The value of the record. Freeform string that depends on the type for structure.\n* `manage_serial` - A boolean indicating if we should manage the serial number. Defaults to false. When true persists the current serial number and a digest of the current zone contents into the node object. If the records change the serial number will be incremented. The default serial number used is the value of soa[:serial].\n* `template_cookbook` - The cookbook to locate the primary zone template file. Defaults to 'bind'. You can override this to change the structure of the zone file.\n* `template_name` - The name of the primary zone template file within a cookbook. Defaults to 'primary\\_zone.erb'\n* `view` - Name of the view to configure the zone in. Defaults to the value from the `bind_config` property.\n* `file_name` - Name of the file to store the zone in. Defaults to the name property. Used when you wish to have the same zone with different content in different views.\n* `zone_name` - The zone name of the zone. Used only if the name property does not match the zone name.\n\n#### A note on serial numbers\n\nSerial numbers are primarily used by the DNS to discover if a zone has changed\nand thus trigger a zone transfer by a secondary server. If you are managing all\nof the authoritative servers for a zone with chef then you do not need to change\nserial numbers when updating a zone. In this instance you can set a simple\nstatic serial number ('1' is used by default and is just fine).\n\nOn the other hand, if you have non-chef managed secondary servers then you will\nneed to increment the serial number whenever the record set changes. This can be\ndone in two different ways: manually (where you control the serial number set\nand will increment it each time the record set changes), or using the\n`manage_serial` property.\n\nIf you use the `manage_serial` property then each time the record set changes\nthe serial number will be incremented. Providing a serial number in the `soa`\nproperty will be used as a default value for the serial number. When enabled\nthis property will cause the cookbook to store the serial number and a hash of\nthe record set in the host's node object. If you destroy the node object then\nthis will result in the serial number being reset to the default value in the\n`soa` property. Finally, ensure that you only have a single server using the\n`manage_serial` property. Otherwise you may end up with different name servers\nwith different serial numbers. In this case, set up a single node as the\nprimary server and use the `bind_secondary_zone` on all the other authoritative\nservers to pull the zone from that designated primary server.\n\n\n### `bind_secondary_zone`\n\nThe `bind_secondary_zone` resource will configure a zone to be pulled from a\nprimary name server.\n\n#### Examples\n\n```ruby\nbind_secondary_zone 'example.com' do\n  primaries [\n    '10.1.1.1',\n    '10.2.2.2'\n  ]\nend\n\nbind_secondary_zone 'example.org' do\n  primaries [\n    '10.1.1.1',\n    '10.2.2.2'\n  ]\n\n  options [\n    'zone-statistics full'\n  ]\nend\n```\n\n#### Properties\n\n* `primaries` - An array of IP addresses used as the upstream master for this zone. Is mandatory and has no default.\n* `options` - Array of option strings. Each option should be a valid BIND option minus the trailing semicolon. Defaults to an empty array.\n* `view` - Name of the view to configure the zone in. Defaults to the value from the `bind_config` property.\n* `file_name` - Name of the file to store the zone in. Defaults to the name property. Used when you wish to have the same zone with different content in different views.\n* `zone_name` - The zone name of the zone. Used only if the name property does not match the zone name.\n\n### `bind_forwarder`\n\nThe `bind_forwarder` resource will configure a forwarding only zone.\n\n#### Examples\n\n```ruby\nbind_forwarder 'example.com' do\n  forwarders [\n    '10.1.1.1',\n    '10.2.2.2'\n  ]\nend\n\nbind_forwarder 'example.org' do\n  forward 'first'\n  forwarders ['10.0.1.1', '10.2.1.1']\nend\n```\n\n#### Properties\n\n* `forwarders` - An array of IP addresses to which requests for this zone will\n  be forwarded to. Defaults to an empty list. (Which if set will disable\n  forwarding for this zone if globally configured).\n* `forward` - Set to 'first' if you wish to try a regular lookup if forwaridng fails. 'only' will cause the query to fail if forwarding fails. Default is 'only'.\n* `view` - Name of the view to configure the zone in. Defaults to the value from the `bind_config` property.\n\n### `bind_acl`\n\nThe `bind_acl` resource allows you to create a named ACL list within the\nBIND configuration.\n\n#### Examples\n\n```ruby\nbind_acl 'google-dns-servers' do\n  entries [\n    '8.8.8.8',\n    '8.8.4.4'\n  ]\nend\n\nbind_acl 'internal-dns' do\n  entries [\n    '! 10.1.1.1',\n    '10/8'\n  ]\nend\n\nbind_acl 'tsig_key' do\n  entries [\n    'key \"internal-key\"',\n  ]\nend\n```\n#### Properties\n\n* `entries` - An array of strings representing each acl entry.\n\nEach entry should be a valid BIND address match list. This means it can be:\n\n- an IP address\n- an IP prefix\n- a key id\n- the name of a different address march list from another acl statement\n- a nested address match list enclosed in braces\n\nPredefined ACLs (from BIND itself) which do not need additional configuration are: any, none, localhost, and localnets.\n\n### `bind_key`\n\nThe `bind_key` resource adds a shared secret key (for either TSIG or\nthe command channel) to the configuration.\n\n```ruby\nbind_key 'dns-update-key' do\n  algorithm 'hmac-sha256'\n  secret 'this_is_the_secret_key'\nend\n```\n\n#### Properties\n\n* `algorithm` - The algorithm that the secret key was generated from.\n* `secret` - The secret key\n\n### `bind_server`\n\nThe `bind_server` resource allows specific options to be configured for a\nparticular upstream name server.\n\n#### Examples\n\n```ruby\nbind_server '10.1.1.1' do\n  options [\n    'bogus yes'\n  ]\nend\n```\n\n#### Properties\n\n* `options` - Array of option strings. Each option should be a valid BIND option minus the trailing semicolon. Defaults to an empty array.\n\n### `bind_logging_channel`\n\nThe `bind_logging_channel` resource will configure a destination for logs to be sent to. To actually send logs you need to also configure a `bind_logging_category`.\n\n#### Examples\n\n```ruby\nbind_logging_channel 'querylog' do\n  destination 'file'\n  severity 'info'\n  path '/tmp/query.log'\n  versions 5\n  size '10m'\n  print_category true\n  print_severity true\n  print_time true\nend\n\nbind_logging_channel 'syslog' do\n  destination 'syslog'\n  facility 'daemon'\n  severity 'info'\nend\n```\n\n#### Properties\n\n* `destination` - String containing the destination name. Must be one of: stderr, syslog, file, or null.\n* `facility` - String containing the syslog facility to use for the syslog destination. Must be a valid syslog facility: kern user mail daemon auth syslog lpr news uucp cron authpriv ftp local0 - local7.\n* `severity` - String containing the minimum severity of BIND logs to send to this channel. Can be critical, error, warning, notice, info, dynamic, or debug (this must be followed by a number representing the debug verbosity).\n* `path` - File name used for the file destination.\n* `versions` - Number of versions of the log file used for the file destination.\n* `size` - Maximum size of the log file used for the file destination.\n* `print_category` - Boolean representing if we should print the category in the output message.\n* `print_severity` - Boolean representing if we should print the severity of the log message to the output channel.\n* `print_time` - Boolean representing if we should print the time in the log message sent to the output channel.\n\n### `bind_logging_category`\n\nThe `bind_logging_category` resource maps BIND logging categories to logging channels.\n\n#### Examples\n\n```ruby\nbind_logging_category 'queries' do\n  channels ['syslog', 'querylog']\nend\n\nbind_logging_category 'xfer-in' do\n  channels 'syslog'\nend\n```\n\n#### Properties\n\n* `category` - Name of the BIND logging category to send to the specified channels. Defaults to the name of the resource.\n* `channels` - Array of names (or single name) of channels to send the category of logs to.\n\n\n## License and Author\n\n- Copyright: 2011 Eric G. Wolfe\n- Copyright: 2017, 2018 David Bruce\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n","maintainer":"David Bruce","maintainer_email":"djb@ragnarok.net","license":"Apache-2.0","platforms":{"ubuntu":">= 0.0.0","redhat":">= 0.0.0","centos":">= 0.0.0","debian":">= 0.0.0"},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/joyofhex/cookbook-bind","issues_url":"https://github.com/joyofhex/cookbook-bind/issues","chef_version":[[">= 12.16"]],"ohai_version":[]}